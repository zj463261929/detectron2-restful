MODEL:
  WEIGHTS: "/data/AI/zhangjing/detectron2/output/oil/res101_1080_20191024_scale4_angle0/model_0079999.pth"
  META_ARCHITECTURE: "RetinaNet"
  BACKBONE:
    NAME: "build_retinanet_resnet_fpn_backbone"
  RESNETS:
    DEPTH: 101
    OUT_FEATURES: ["res3", "res4", "res5"]
  ANCHOR_GENERATOR:
    SIZES: !!python/object/apply:eval ["[[x, x * 2**(1.0/3), x * 2**(2.0/3) ] for x in [32, 64, 128, 256, 512 ]]"]
    ASPECT_RATIOS: [[1.0, 2.0, 3.0, 5.0, 0.2, 0.5]] #[[0.5, 1.0, 2.0]]
    ANGLES: [[-90, 0, 90]]
  FPN:
    IN_FEATURES: ["res3", "res4", "res5"]
  RETINANET:
    IOU_THRESHOLDS: [0.4, 0.5]
    IOU_LABELS: [0, -1, 1]
    NUM_CLASSES: 13
    NUM_CONVS: 4
    FOCAL_LOSS_GAMMA: 2.0
    FOCAL_LOSS_ALPHA: 0.25
    SCORE_THRESH_TEST: 0.05
    TOPK_CANDIDATES_TEST: 1000
    NMS_THRESH_TEST: 0.5
DATASETS:
  TRAIN: ("coco_2017_oil_train",)
  TEST: ("coco_2017_oil_trainval","coco_2017_oil_val", "coco_2017_oil_benchmark_day269", "coco_2017_oil_benchmark_day200","coco_2017_oil_benchmark_night150",)
SOLVER:
  WEIGHT_DECAY: 0.0001
  IMS_PER_BATCH: 1
  GAMMA: 0.1  
  BASE_LR: 0.001  # Note that RetinaNet uses a different default learning rate
  STEPS: (50000, 100000, 150000)
  MAX_ITER: 200000
INPUT:
  #MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN: (1080,)#(800,)
  MAX_SIZE_TRAIN: 1920 #1333
  MIN_SIZE_TEST: 1080 #800
  MAX_SIZE_TEST: 1920 #1333
